Index: users/testUser/testUser
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>testUser\r\nxpu`wgtilbtjikfnxrtmi\r\nfalse\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/users/testUser/testUser b/users/testUser/testUser
--- a/users/testUser/testUser	(revision 2b35abdfdce701c2ebe9e2af250bd50ca9a17b38)
+++ b/users/testUser/testUser	(date 1667843728733)
@@ -1,3 +1,3 @@
 testUser
-xpu`wgtilbtjikfnxrtmi
+[u, \, x, n, |, j, w, _]
 false
Index: users/testUser2/testUser2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>testUser2\r\nw`fgqtljt_u\\xn|jw_\r\ntrue\r\nComputers\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/users/testUser2/testUser2 b/users/testUser2/testUser2
--- a/users/testUser2/testUser2	(revision 2b35abdfdce701c2ebe9e2af250bd50ca9a17b38)
+++ b/users/testUser2/testUser2	(date 1667843758566)
@@ -1,4 +1,3 @@
 testUser2
-w`fgqtljt_u\xn|jw_
-true
-Computers
+[u, \, x, n, |, j, w, _, 6, -, 8, /]
+false
Index: LogIn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class LogIn {\r\n    /**\r\n     * Writes user's username to a file\r\n     *\r\n     * @param user String of the user's username\r\n     * @return boolean of if file was successfully written or not\r\n     */\r\n    public static boolean writeFile(String user) {\r\n        try (PrintWriter pw = new PrintWriter(new FileOutputStream(\"users/\" + user + \"/\" + user))) {\r\n            pw.println(user);\r\n            return (true);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends an additional line to a given user's file\r\n     *\r\n     * @param user     the user whose file is being appended\r\n     * @param toAppend the parameter that is being appended to the file\r\n     * @return boolean of if the file was successfully written or not\r\n     */\r\n    public static boolean writeFile(String user, String toAppend) {\r\n        try (PrintWriter pw = new PrintWriter(new FileOutputStream(\"users/\" + user + \"/\" + user, true))) {\r\n            pw.println(toAppend);\r\n            return (true);\r\n        } catch (Exception e) {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encrypts the password of the user file when an account is created\r\n     *\r\n     * @param user the user whose password is being encrypted\r\n     */\r\n    public static void encryptFile(String user) {\r\n        try (BufferedReader br = new BufferedReader(new FileReader(\"users/\" + user + \"/\" + user))) {\r\n            String password = \"\";\r\n            int index = 0;\r\n            String line = br.readLine();\r\n            while (line != null) {\r\n                index++;\r\n                if (index == 2) {\r\n                    password = line;\r\n                }\r\n                line = br.readLine();\r\n            }\r\n            br.close();\r\n            char[] toBeEncrypted = password.toCharArray();\r\n            for (int i = 0; i < toBeEncrypted.length; i++) {\r\n                if (i % 2 == 0) {\r\n                    toBeEncrypted[i] += 5;\r\n                } else {\r\n                    toBeEncrypted[i] -= 5;\r\n                }\r\n            }\r\n            writeFile(user);\r\n            String finalPassword = \"\";\r\n            for (char c : toBeEncrypted) {\r\n                finalPassword += c;\r\n            }\r\n            writeFile(user, finalPassword);\r\n        } catch (Exception e) {\r\n            System.out.println(\"An unknown error occurred!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Takes a password input by a user attempting to log in and uses the key to encrypt it for comparison\r\n     *\r\n     * @param input the password being encrypted\r\n     * @return String of the encrypted password\r\n     */\r\n    public static String encrypt(String input) {\r\n        String finalInput = \"\";\r\n        char[] inputArray = input.toCharArray();\r\n        for (int i = 0; i < inputArray.length; i++) {\r\n            if (i % 2 == 0) {\r\n                inputArray[i] += 5;\r\n            } else {\r\n                inputArray[i] -= 5;\r\n            }\r\n        }\r\n        for (char c : inputArray) {\r\n            finalInput += c;\r\n        }\r\n        return (finalInput);\r\n    }\r\n\r\n    /**\r\n     * Creates the file and directory for a user only if the account doesn't already exist\r\n     *\r\n     * @param user the user whose file is being created\r\n     * @param scan scanner object to capture input\r\n     */\r\n    public static void createUser(String user, Scanner scan) {\r\n        File f;\r\n        File dir = new File(\"users/\" + user);\r\n        if (!dir.exists()) {\r\n            dir.mkdirs();\r\n            f = new File(\"users/\" + user + \"/\" + user);\r\n        } else {\r\n            try {\r\n                if (!dir.createNewFile()) {\r\n                    while (!dir.createNewFile()) {\r\n                        System.out.println(\"User already exists! Please enter another username.\");\r\n                        user = scan.nextLine();\r\n                        dir = new File(\"users/\" + user);\r\n                    }\r\n                }\r\n                dir.mkdirs();\r\n                f = new File(\"users/\" + user + \"/\" + user);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                System.out.println(\"An unknown error occurred line 116!\");\r\n            }\r\n        }\r\n        boolean fileStatus = writeFile(user);\r\n        boolean done = false;\r\n        if (fileStatus) {\r\n            try {\r\n                while (!done) {\r\n                    System.out.println(\"Please enter a password.\");\r\n                    String password = scan.nextLine();\r\n                    fileStatus = writeFile(user, password);\r\n                    if (!fileStatus) {\r\n                        break;\r\n                    }\r\n                    encryptFile(user);\r\n                    done = true;\r\n                }\r\n                done = false;\r\n                System.out.println(\"Are you a seller? Please enter 'yes' or 'no.'\");\r\n                while (!done) {\r\n                    String isSeller = scan.nextLine();\r\n                    while (!isSeller.equalsIgnoreCase(\"yes\") &&\r\n                            !isSeller.equalsIgnoreCase(\"no\")) {\r\n                        System.out.println(\"Please enter 'yes' or 'no'!\");\r\n                        isSeller = scan.nextLine();\r\n                    }\r\n                    if (isSeller.equalsIgnoreCase(\"yes\")) {\r\n                        isSeller = \"true\";\r\n                        System.out.println(\"Please enter your store name.\");\r\n                        String storeName = scan.nextLine();\r\n                        fileStatus = writeFile(user, isSeller);\r\n                        fileStatus = writeFile(user, storeName);\r\n                    } else {\r\n                        isSeller = \"false\";\r\n                        fileStatus = writeFile(user, isSeller);\r\n                    }\r\n                    if (!fileStatus) {\r\n                        break;\r\n                    }\r\n                    done = true;\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"Please enter a valid String input!\");\r\n            }\r\n        }\r\n        if (!fileStatus) {\r\n            System.out.println(\"An unknown error occurred!\");\r\n        }\r\n        System.out.printf(\"Account created! Welcome, %s!%n\", user);\r\n    }\r\n\r\n    /**\r\n     * Reads the password of the file for comparison\r\n     *\r\n     * @param user the user whose password is being read\r\n     * @return String of the encrypted password\r\n     */\r\n    public static String readPassword(String user) {\r\n        try (BufferedReader br = new BufferedReader(new FileReader(\"users/\" + user + \"/\" + user))) {\r\n            String password = \"\";\r\n            int index = 0;\r\n            String line = br.readLine();\r\n            while (line != null) {\r\n                index++;\r\n                if (index == 2) {\r\n                    password = line;\r\n                }\r\n                line = br.readLine();\r\n            }\r\n            return (password);\r\n        } catch (Exception e) {\r\n            System.out.println(\"An unknown error occurred!\");\r\n        }\r\n        return (null);\r\n    }\r\n\r\n    /**\r\n     * Allows users to log in OR calls methods above and builds a file of the following format for a new user:\r\n     * username\r\n     * password (encrypted)\r\n     * isSeller (true or false)\r\n     * storeName (included ONLY is user isSeller)\r\n     *\r\n     * @return String of the user's name\r\n     */\r\n    public static String userInteraction() {\r\n        Scanner scan = new Scanner(System.in);\r\n        System.out.println(\"Welcome! Please enter 1 to log in or 2 to create a new account.\");\r\n        boolean done = false;\r\n        int input = 0;\r\n        while (!done) {\r\n            try {\r\n                input = scan.nextInt();\r\n                scan.nextLine();\r\n                if (input == 1 || input == 2) {\r\n                    done = true;\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"That's not a valid input!\");\r\n            }\r\n        }\r\n        if (input == 1) {\r\n            boolean userFound = false;\r\n            String user = \"\";\r\n            done = false;\r\n            while (!done) {\r\n                System.out.println(\"Please enter your username.\");\r\n                user = scan.nextLine();\r\n                File F = new File(\"users/\" + user + \"/\" + user);\r\n                try {\r\n                    if (F.createNewFile()) {\r\n                        F.delete();\r\n                        System.out.println(\"That user doesn't exist! Press 1 to try again and 2 to exit.\");\r\n                        boolean continueUser = false;\r\n                        while (!continueUser) {\r\n                            try {\r\n                                input = scan.nextInt();\r\n                                scan.nextLine();\r\n                                if (input == 2) {\r\n                                    done = true;\r\n                                    break;\r\n                                } else if (input == 1) {\r\n                                    continueUser = true;\r\n                                } else {\r\n                                    System.out.println(\"Please enter a valid input!\");\r\n                                }\r\n                            } catch (Exception e) {\r\n                                System.out.println(\"Please enter a valid input!\");\r\n                            }\r\n                        }\r\n                    } else {\r\n                        userFound = true;\r\n                        done = true;\r\n                    }\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            if (userFound) {\r\n                boolean loggedIn = false;\r\n                System.out.println(\"Please enter your password\");\r\n                done = false;\r\n                while (!done) {\r\n                    try {\r\n                        String passwordInput = scan.nextLine();\r\n                        if (encrypt(passwordInput).equals(readPassword(user))) {\r\n                            System.out.printf(\"Welcome, %s!%n\", user);\r\n                            done = true;\r\n                            loggedIn = true;\r\n                        } else {\r\n                            boolean continuePassword = false;\r\n                            while (!continuePassword) {\r\n                                System.out.println(\"Incorrect password! Enter 1 to try again or 2 to exit.\");\r\n                                try {\r\n                                    input = scan.nextInt();\r\n                                    scan.nextLine();\r\n                                    if (input == 2) {\r\n                                        done = true;\r\n                                        break;\r\n                                    } else if (input == 1) {\r\n                                        continuePassword = true;\r\n                                        System.out.println(\"Please enter your password\");\r\n                                    } else {\r\n                                        System.out.println(\"Please enter a valid input!\");\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    System.out.println(\"Please enter a valid input!\");\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        System.out.println(\"An unknown error occurred!\");\r\n                    }\r\n                }\r\n                if (loggedIn) {\r\n                    return (user);\r\n                }\r\n            }\r\n        } else {\r\n            done = false;\r\n            System.out.println(\"Please enter a username.\");\r\n            while (!done) {\r\n                try {\r\n                    String user = scan.nextLine();\r\n                    createUser(user, scan);\r\n                    done = true;\r\n                    return (user);\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Please enter a valid username!\");\r\n                }\r\n            }\r\n        }\r\n        return (null);\r\n    }\r\n\r\n    /**\r\n     * Runs all LogIn methods to either create a user or log one in; afterwards, creates String ArrayList of user information\r\n     *\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        String user = userInteraction();\r\n        if (user != null) {\r\n            ArrayList<String> fileContents = new ArrayList();\r\n            try (BufferedReader bfr = new BufferedReader(new FileReader(\"users/\" + user + \"/\" + user))) {\r\n                int index = 0;\r\n                String line = bfr.readLine();\r\n                while (line != null) {\r\n                    index++;\r\n                    if (index != 2) {\r\n                        fileContents.add(line);\r\n                    }\r\n                    line = bfr.readLine();\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"An unknown error occurred!\");\r\n            }\r\n            System.out.println(\"\\nUser information:\");\r\n            //TODO Users will be created/accessed by the following information:\r\n            System.out.printf(\"Username: %s%n\" +\r\n                            \"isSeller: %s%n\",\r\n                    fileContents.get(0),\r\n                    fileContents.get(1));\r\n            if (fileContents.size() == 3) {\r\n                System.out.println(\"Store Name: \" + fileContents.get(2));\r\n            }\r\n        } else {\r\n            System.out.println(\"Goodbye!\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LogIn.java b/LogIn.java
--- a/LogIn.java	(revision 2b35abdfdce701c2ebe9e2af250bd50ca9a17b38)
+++ b/LogIn.java	(date 1667843594978)
@@ -1,5 +1,12 @@
+import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.PBEKeySpec;
 import java.io.*;
+import java.security.Key;
+import java.security.SecureRandom;
+import java.security.spec.KeySpec;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Base64;
 import java.util.Scanner;
 
 public class LogIn {
@@ -52,7 +59,6 @@
                 }
                 line = br.readLine();
             }
-            br.close();
             char[] toBeEncrypted = password.toCharArray();
             for (int i = 0; i < toBeEncrypted.length; i++) {
                 if (i % 2 == 0) {
@@ -62,11 +68,7 @@
                 }
             }
             writeFile(user);
-            String finalPassword = "";
-            for (char c : toBeEncrypted) {
-                finalPassword += c;
-            }
-            writeFile(user, finalPassword);
+            writeFile(user, Arrays.toString(toBeEncrypted));
         } catch (Exception e) {
             System.out.println("An unknown error occurred!");
         }
@@ -79,19 +81,20 @@
      * @return String of the encrypted password
      */
     public static String encrypt(String input) {
-        String finalInput = "";
-        char[] inputArray = input.toCharArray();
-        for (int i = 0; i < inputArray.length; i++) {
-            if (i % 2 == 0) {
-                inputArray[i] += 5;
-            } else {
-                inputArray[i] -= 5;
-            }
-        }
-        for (char c : inputArray) {
-            finalInput += c;
+        try {
+            char[] toBeEncrypted = input.toCharArray();
+            for (int i = 0; i < toBeEncrypted.length; i++) {
+                if (i % 2 == 0) {
+                    toBeEncrypted[i] += 5;
+                } else {
+                    toBeEncrypted[i] -= 5;
+                }
+            }
+            return (Arrays.toString(toBeEncrypted));
+        } catch (Exception e) {
+            System.out.println("An unknown error occurred!");
+            return (null);
         }
-        return (finalInput);
     }
 
     /**
Index: MarketUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.sql.SQLOutput;\r\nimport java.util.*;\r\nimport java.text.SimpleDateFormat;\r\n\r\npublic class MarketUser implements User{\r\n    private String username;\r\n    private boolean isSeller;\r\n\r\n    public static void main(String[] args) {\r\n        MarketUser mu = new MarketUser(\"john\",false);\r\n        mu.message();\r\n    }\r\n\r\n    /** Constructor creates new object with a username and tells object if it is a seller or not.\r\n     * @param username The username associated with the user directory you wish to find\r\n     * @param isSeller Tells class whether this instance is a seller or not\r\n     */\r\n    public MarketUser(String username, boolean isSeller) {\r\n        this.username = username;\r\n        this.isSeller = isSeller;\r\n    }\r\n\r\n    /** Method called when user is logged in, using System.out.println() will ask user if they want to message someone,\r\n     * who they want to message, and what they want to message.\r\n     */\r\n    public void message() {\r\n        Integer selection = null;\r\n        String recipient = \"\";\r\n        String proceed;\r\n        Scanner scan = new Scanner(System.in);\r\n        if (isSeller) { // if it is a seller, enter this statement\r\n            System.out.println(\"Do you wish to contact, block, or unblock a potential buyer? (Yes/No)\");\r\n            proceed = scan.nextLine();\r\n            if (proceed.equalsIgnoreCase(\"yes\")) { // if the user has selected to message someone...\r\n                do { // keep prompting for a recipient until they either select a valid recipient, or cancel\r\n                    System.out.println(\"Enter '1' to search for a buyer, enter '2' to see a list of buyers,\" +\r\n                            \"or enter any number to cancel:\");\r\n                    selection = null;\r\n                    do {\r\n                        try {\r\n                            selection = scan.nextInt();\r\n                            scan.nextLine();\r\n                        } catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid number:\");\r\n                            scan.nextLine();\r\n                        }\r\n                    } while (selection == null);\r\n                    if (selection == 1) { // if the user wants to search for a buyer, enter this statement\r\n                        System.out.println(\"Enter the username of a buyer:\");\r\n                        recipient = scan.nextLine();\r\n                        if (checkIfRecipientExists(recipient)) {\r\n                            break; // at this point we know that the variable 'recipient' contains a valid username\r\n                        } else {\r\n                            System.out.println(\"Sorry! This user does not exist!\");\r\n                        }\r\n                    } else if (selection == 2) { // if the user wants to see a list of people to contact\r\n                        try {\r\n                            String[] allAvailableUsers = getAvailableUsers();\r\n                            for (int i = 0; i < allAvailableUsers.length; i++) {\r\n                                System.out.println((i + 1) + \". \" + allAvailableUsers[i]);\r\n                            }\r\n                            System.out.println(allAvailableUsers.length + 1 + \": Cancel\");\r\n                            System.out.println(\"Make a selection:\");\r\n                            selection = null;\r\n                            do {\r\n                                try {\r\n                                    selection = scan.nextInt();\r\n                                    scan.nextLine();\r\n                                    if ((selection < 1 || selection > allAvailableUsers.length + 1)) {\r\n                                        System.out.println(\"Please enter a valid number:\");\r\n                                        selection = null;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid number:\");\r\n                                    scan.nextLine();\r\n                                }\r\n                            } while (selection == null);\r\n                            if (selection != allAvailableUsers.length + 1) {\r\n                                recipient = allAvailableUsers[selection - 1];\r\n                                break; // at this point we again know that the variable 'recipient' contains a valid username\r\n                            }\r\n                        } catch (IOException e) {\r\n                            e.printStackTrace();\r\n                            System.out.println(\"Sorry, there was an error reading the users, please try again!\");\r\n                        }\r\n                    } else {\r\n                        proceed = \"\"; // set proceed to not 'yes' so that we return out of function\r\n                        break;\r\n                    }\r\n                } while(true);\r\n            }\r\n        } else { // lots of repeated code here, but I think needed because of slightly different print statements\r\n            System.out.println(\"Do you wish to contact, block, or unblock a store? (Yes/No)\");\r\n            proceed = scan.nextLine();\r\n            if (proceed.equalsIgnoreCase(\"yes\")) { // if the user has selected to message someone...\r\n                do { // keep prompting for a recipient until they either select a valid recipient, or cancel\r\n                    System.out.println(\"Enter '1' to search for a store, enter '2' to see a list of stores, \" +\r\n                            \"or enter any number to cancel:\");\r\n                    selection = null;\r\n                    do {\r\n                        try {\r\n                            selection = scan.nextInt();\r\n                            scan.nextLine();\r\n                        } catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid number:\");\r\n                            scan.nextLine();\r\n                        }\r\n                    } while (selection == null);\r\n                    if (selection == 1) { // if the user wants to search for a store, enter this statement\r\n                        System.out.println(\"Enter the name of a store:\");\r\n                        recipient = scan.nextLine();\r\n                        if (checkIfRecipientExists(recipient)) {\r\n                            break; // at this point we know that the variable 'recipient' contains a valid username\r\n                        } else {\r\n                            System.out.println(\"Sorry! This store does not exist!\");\r\n                        }\r\n                    } else if (selection == 2) { // if the user wants to see a list of people to contact\r\n\r\n                        try {\r\n                            String[] allAvailableUsers = getAvailableUsers();\r\n                            for (int i = 0; i < allAvailableUsers.length; i++) {\r\n                                System.out.println((i + 1) + \". \" + allAvailableUsers[i]);\r\n                            }\r\n                            System.out.println(allAvailableUsers.length + 1 + \": Cancel\");\r\n                            System.out.println(\"Make a selection:\");\r\n                            selection = null;\r\n                            do {\r\n                                try {\r\n                                    selection = scan.nextInt();\r\n                                    scan.nextLine();\r\n                                    if ((selection < 1 || selection > allAvailableUsers.length + 1)) {\r\n                                        System.out.println(\"Please enter a valid number:\");\r\n                                        selection = null;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid number:\");\r\n                                    scan.nextLine();\r\n                                }\r\n                            } while (selection == null);\r\n                            if (selection != allAvailableUsers.length + 1) {\r\n                                recipient = allAvailableUsers[selection - 1];\r\n                                break; // at this point we again know that the variable 'recipient' contains a valid username\r\n                            }\r\n                        } catch (IOException e) {\r\n                            e.printStackTrace();\r\n                            System.out.println(\"Sorry, there was an error reading the users, please try again!\");\r\n                        }\r\n                    } else {\r\n                        proceed = \"\"; // set proceed to not 'yes' so that we return out of function\r\n                        break;\r\n                    }\r\n                } while(true);\r\n            }\r\n        }\r\n        System.out.println(\"here\");\r\n        /* at this point in program one of two things has happened: Either the String recipient contains a valid\r\n        username, or the user said \"No\" to wanting to send message */\r\n        if (!proceed.equalsIgnoreCase(\"yes\")) {\r\n            return;\r\n        } // after this statement we know that String recipient contains a valid value\r\n        checkIfMessageExists(recipient); // this will check if message has already been created and create if not\r\n        System.out.printf(\"Connected with %s!\\nPlease select an option:\\n\", recipient);\r\n        selection = null;\r\n        System.out.println(\"1. Send a message\\n\" +\r\n                \"2. Edit a message\\n\" +\r\n                \"3. Delete a message\\n\" +\r\n                \"4. Block this \" + ((this.isSeller)? \"buyer\\n\" : \"store\\n\") +\r\n                \"5. Unblock this \" + ((this.isSeller)? \"buyer\\n\" : \"store\\n\") +\r\n                \"6. Import a .txt file\\n\" +\r\n                \"7. Export message as a .csv file\\n\" +\r\n                \"8. Cancel\");\r\n        selection = -1;\r\n        do {\r\n            try {\r\n                if (selection != -1) {\r\n                    System.out.println(\"Please enter a valid number:\");\r\n                }\r\n                selection = scan.nextInt();\r\n                scan.nextLine();\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid number:\");\r\n                scan.nextLine();\r\n            }\r\n        } while ((selection < 1 || selection > 8));\r\n        switch (selection) {\r\n            case 1 -> appendMessage(recipient);\r\n            case 2 -> editMessage(recipient);\r\n            case 3 -> deleteMessage(recipient);\r\n            case 4 -> blockUser(recipient);\r\n            case 5 -> unblockUser(recipient);\r\n            // TODO case 6 -> implement;\r\n            // TODO case 7 -> implement;\r\n        }\r\n        System.out.println(\"Thank you for using the messaging system!\");\r\n    }\r\n\r\n    /**\r\n     * Get a list of users that this user can message\r\n     * @return an array of available people for messaging\r\n     * @throws IOException\r\n     */\r\n    public String[] getAvailableUsers() throws IOException {\r\n        ArrayList<String> available = new ArrayList<>();\r\n        String buyerOrSeller = \"data/\" + ((this.isSeller)? \"buyers/\": \"sellers/\");\r\n        //Goes in the right directory\r\n        File recipientType = new File(\"data/\" + ((this.isSeller)? \"buyers/\": \"sellers/\"));\r\n        String[] usernames = recipientType.list();\r\n        //Loop through user directories\r\n        for(String userDir : usernames) {\r\n            File thatUserBlockedFile = new File(buyerOrSeller+\"/\" + userDir + \"/\" + \"hasBlocked\");\r\n            BufferedReader bfr = new BufferedReader(new FileReader(thatUserBlockedFile));\r\n            String line;\r\n            boolean blocked = false;\r\n            //Check the hasBlocked file, if this.username isn't there add the user to available\r\n            while((line = bfr.readLine())!= null) {\r\n                if(line.equals(this.username)) {\r\n                    blocked = true;\r\n                    break;\r\n                }\r\n            }\r\n            bfr.close();\r\n            if(!blocked) {\r\n                available.add(userDir);\r\n            }\r\n        }\r\n        //Just turn ArrayList into array classic 180 stuff\r\n        String[] availables = new String[available.size()];\r\n        for(int i = 0; i < availables.length; i++) {\r\n            availables[i] = available.get(i);\r\n        }\r\n        return availables;\r\n    }\r\n\r\n    /** Method to see if given recipient actually exists by checking if directory with recipient name exists\r\n     * @param recipient The username associated with the user directory you wish to find\r\n     */\r\n    public boolean checkIfRecipientExists(String recipient) { // DESTIN: look through directories and check for name\r\n        String path = \"\";\r\n        if (isSeller) {\r\n            path = \"data/buyers/\";\r\n        } else {\r\n            path = \"data/sellers/\";\r\n        }\r\n        try {\r\n            File f = new File(path + recipient);\r\n            return f.exists();\r\n        } catch (Exception e) {\r\n            System.out.println(\"Error loading file, please try again\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** Method to see if conversation has started\r\n     * Check if <username><recipient>.txt exists because if it exists then <recipient><username>.txt also exists\r\n     * if nto create both files\r\n     * @param recipient The username associated with the person the user wishes to measure\r\n     */\r\n    public void checkIfMessageExists(String recipient) {// check if <username><recipient>.txt exits in directory or not\r\n        String path1 = \"\";\r\n        String path2 = \"\";\r\n        if (isSeller) {\r\n            path1 = \"data/sellers/\" + username + \"/\";\r\n            path2 = \"data/buyers/\" + recipient + \"/\";\r\n        } else {\r\n            path1 = \"data/buyers/\" + username + \"/\";\r\n            path2 = \"data/sellers/\" + recipient + \"/\";\r\n        }\r\n        try {\r\n            File fUser = new File(path1 + username + recipient + \".txt\");\r\n            boolean didCreate = fUser.createNewFile();\r\n            if (didCreate) {\r\n                File fRecipient = new File(path2 + recipient + username + \".txt\");\r\n                fRecipient.createNewFile();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds message to both sender and receiver file\r\n     *\r\n     * @param recipient\r\n     *\r\n     * @Author John Brooks\r\n     */\r\n\r\n    public void appendMessage(String recipient) {\r\n\r\n        String fileRecipient = \"\";\r\n        String fileSender = \"\";\r\n        String message;\r\n        String printFile;\r\n\r\n        if (isSeller) {\r\n            fileSender = \"data/sellers/\" + username + \"/\";\r\n            fileRecipient = \"data/buyers/\" + recipient + \"/\";\r\n        } else {\r\n            fileSender = \"data/buyers/\" + username + \"/\";\r\n            fileRecipient = \"data/sellers/\" + recipient + \"/\";\r\n        }\r\n        File senderF = new File(fileSender + username + recipient + \".txt\");\r\n        File recipientF = new File(fileRecipient + recipient + username + \".txt\");\r\n        if (senderF.exists() && recipientF.exists()) {\r\n            try {\r\n                //display prior to adding\r\n                BufferedReader display = new BufferedReader(new FileReader(senderF));\r\n                printFile = display.readLine();\r\n                while (printFile != null) {\r\n                    System.out.println(printFile);\r\n                    printFile = display.readLine();\r\n                }\r\n                FileOutputStream fosSend = new FileOutputStream(senderF, true);\r\n                PrintWriter messageSenderWriter = new PrintWriter(fosSend);\r\n                FileOutputStream fosReceive = new FileOutputStream(recipientF, true);\r\n                PrintWriter messageReceiveWriter = new PrintWriter(fosReceive);\r\n                Scanner scan = new Scanner(System.in);\r\n                System.out.print(username + \"- \");\r\n                message = scan.nextLine();\r\n                //write it on the end of each person's file\r\n                String timeStamp = new SimpleDateFormat(\"MM:dd:HH:mm:ss\").format(new java.util.Date());\r\n                messageSenderWriter.println(username + \" \" + timeStamp + \"- \" + message);\r\n                messageReceiveWriter.println(username + \" \" + timeStamp + \"- \" + message);\r\n                display.close();\r\n                messageSenderWriter.close();\r\n                messageReceiveWriter.close();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    } // add to both files\r\n\r\n    /**\r\n     * Searches file for index that matches one given by the user and changes that line and\r\n     * writes it back to the file\r\n     *\r\n     * @param recipient\r\n     *\r\n     * @Author John Brooks\r\n     */\r\n    public void editMessage(String recipient) {\r\n\r\n        String fileRecipient = \"\";\r\n        String fileSender = \"\";\r\n        String message;\r\n        String printFile;\r\n        int count = 0;\r\n        int ind = -1;\r\n        int flag;\r\n\r\n        if (isSeller) {\r\n            fileSender = \"data/sellers/\" + username + \"/\";\r\n            fileRecipient = \"data/buyers/\" + recipient + \"/\";\r\n        } else {\r\n            fileSender = \"data/buyers/\" + username + \"/\";\r\n            fileRecipient = \"data/sellers/\" + recipient + \"/\";\r\n        }\r\n        File senderF = new File(fileSender + username + recipient + \".txt\");\r\n        File recipientF = new File(fileRecipient + recipient + username + \".txt\");\r\n\r\n        if (senderF.exists() && recipientF.exists()) {\r\n            try {\r\n                //initial display\r\n                BufferedReader display = new BufferedReader(new FileReader(senderF));\r\n                printFile = display.readLine();\r\n                while (printFile != null) {\r\n                    count++;\r\n                    System.out.println(count + \": \" + printFile);\r\n                    printFile = display.readLine();\r\n                }\r\n                if (count > 0) {\r\n                    BufferedReader buffSender = new BufferedReader(new FileReader(senderF));\r\n                    BufferedReader buffReceiver = new BufferedReader(new FileReader(recipientF));\r\n                    FileOutputStream fosSend = new FileOutputStream(senderF, false);\r\n                    PrintWriter messageSenderWriter = new PrintWriter(fosSend);\r\n                    FileOutputStream fosReceive = new FileOutputStream(recipientF, false);\r\n                    PrintWriter messageReceiveWriter = new PrintWriter(fosReceive);\r\n                    Scanner scan = new Scanner(System.in);\r\n                    //acquiring index\r\n                    System.out.println(\"Which index would you like to change?\");\r\n                    do {\r\n                        flag = 0;\r\n                        try {\r\n                            ind = Integer.parseInt(scan.nextLine());\r\n                        } catch (NumberFormatException n) {\r\n                            flag++;\r\n                        }\r\n                        if (flag == 1 || (ind < 1 || ind > count))\r\n                            System.out.println(\"Your index must be a number and must be available. Try again:\");\r\n                    } while (flag == 1 || (ind < 1 || ind > count));\r\n                    System.out.println(\"What would you like the new version to say?\");\r\n                    String edit = scan.nextLine();\r\n                    ArrayList<String> readSenderFile = new ArrayList<>();\r\n                    ArrayList<String> readReceiverFile = new ArrayList<>();\r\n                    String messageToChange = \"\";\r\n                    String line1 = buffSender.readLine();\r\n                    while (line1 != null) {\r\n                        readSenderFile.add(line1);\r\n                        line1 = buffSender.readLine();\r\n                    }\r\n                    String line2 = buffReceiver.readLine();\r\n                    while (line2 != null) {\r\n                        readReceiverFile.add(line2);\r\n                        line2 = buffReceiver.readLine();\r\n                    }\r\n                    // runs through senders file to find index and change to edit\r\n                    String extractNameAndTime;\r\n                    for (int i = 0; i < readSenderFile.size(); i++) {\r\n                        if (i == ind - 1) {\r\n                            extractNameAndTime = readSenderFile.get(i).substring(0, readSenderFile.get(i).indexOf(\"-\") + 1);\r\n                            // this stores the message prior to editing so it can be found in the receivers file\r\n                            messageToChange = readSenderFile.get(i);\r\n                            edit = extractNameAndTime + \" \" + edit;\r\n                            readSenderFile.set(i, edit);\r\n                        }\r\n                    }\r\n                    // runs through the receivers file and finds the message to change, and changes it\r\n                    for (int i = 0; i < readReceiverFile.size(); i++) {\r\n                        if (readReceiverFile.get(i) == messageToChange) {\r\n                            readReceiverFile.set(i, edit);\r\n                        }\r\n                    }\r\n\r\n                    //write back to files\r\n                    for (int i = 0; i < readSenderFile.size(); i++) {\r\n                        messageSenderWriter.write(readSenderFile.get(i));\r\n                    }\r\n                    for (int i = 0; i < readReceiverFile.size(); i++) {\r\n                        messageReceiveWriter.write(readReceiverFile.get(i));\r\n                    }\r\n                    display.close();\r\n                    buffSender.close();\r\n                    buffReceiver.close();\r\n                    messageSenderWriter.close();\r\n                    messageReceiveWriter.close();\r\n                } else\r\n                    System.out.println(\"There is nothing in this file to edit.\");\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n        * Searches file for index that matches one given by the user to not add it to an arraylist and\r\n        * therefore not write it to the file\r\n         *\r\n        * @param recipient\r\n         *\r\n        * @Author John Brooks\r\n         */\r\n\r\n    public void deleteMessage(String recipient) {\r\n        String fileRecipient = \"\";\r\n        String fileSender = \"\";\r\n        String message;\r\n        String printFile;\r\n        int count = 0;\r\n        int flag;\r\n        int indexOfDelete = -1;\r\n        \r\n        if (isSeller) {\r\n            fileSender = \"data/sellers/\" + username + \"/\";\r\n            fileRecipient = \"data/buyers/\" + recipient + \"/\";\r\n        } else {\r\n            fileSender = \"data/buyers/\" + username + \"/\";\r\n            fileRecipient = \"data/sellers/\" + recipient + \"/\";\r\n        }\r\n        File senderF = new File(fileSender + username + recipient + \".txt\");\r\n        File recipientF = new File(fileRecipient + recipient + username + \".txt\");\r\n\r\n        if (senderF.exists() && recipientF.exists()) {\r\n            try {\r\n                //display\r\n                BufferedReader display = new BufferedReader(new FileReader(senderF));\r\n                printFile = display.readLine();\r\n                while (printFile != null) {\r\n                    count++;\r\n                    System.out.println(count + \": \" + printFile);\r\n                    printFile = display.readLine();\r\n                }\r\n                if (count > 0) {\r\n                    BufferedReader buffSender = new BufferedReader(new FileReader(senderF));\r\n                    FileOutputStream fosSend = new FileOutputStream(senderF, false);\r\n                    PrintWriter messageSenderWriter = new PrintWriter(fosSend);\r\n                    Scanner scan = new Scanner(System.in);\r\n                    //get index of delete\r\n                    do {\r\n                        flag = 0;\r\n                        try {\r\n                            indexOfDelete = Integer.parseInt(scan.nextLine());\r\n                        } catch (NumberFormatException n) {\r\n                            flag++;\r\n                        }\r\n                        if (flag == 1 || (indexOfDelete < 1 || indexOfDelete > count))\r\n                            System.out.println(\"Your index must be a number and must be available. Try again:\");\r\n                    } while (flag == 1 || (indexOfDelete < 1 || indexOfDelete > count));\r\n\r\n                    ArrayList<String> readSenderFile = new ArrayList<>();\r\n                    String line = buffSender.readLine();\r\n                    //run through array, add lines, and check throughout if line matches indexOfDelete then dont add it\r\n                    int count2 = 0;\r\n                    while (line != null) {\r\n                        count2++;\r\n                        if (count2 != indexOfDelete) {\r\n                            readSenderFile.add(line);\r\n                        }\r\n                        line = buffSender.readLine();\r\n                    }\r\n                    for (int i = 0; i < readSenderFile.size(); i++) {\r\n                        messageSenderWriter.write(readSenderFile.get(i));\r\n                    }\r\n                    display.close();\r\n                    buffSender.close();\r\n                    messageSenderWriter.close();\r\n                } else\r\n                    System.out.println(\"There is nothing in this file to delete.\");\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n   /**\r\n     * Block a user if not already blocked\r\n     * @param username: name of person to block\r\n     * @return true if already blocked, false if notBlocked\r\n     * @throws IOException\r\n     */\r\n    public boolean blockUser(String username) {\r\n        try {\r\n            String blockedFilePath = \"data/\" + ((this.isSeller) ? \"sellers/\" : \"buyers/\") + this.username + \"/hasBlocked\";\r\n            File blockedFile = new File(blockedFilePath);\r\n            BufferedReader bfr = new BufferedReader(new FileReader(blockedFile));\r\n            String line;\r\n            while ((line = bfr.readLine()) != null) {\r\n                if (line.equals(username)) {\r\n                    //The user is already blocked\r\n                    return true;\r\n                }\r\n            }\r\n            bfr.close();\r\n            //Write the name of the victim to hasBlocked file\r\n            PrintWriter pw = new PrintWriter(new FileWriter(blockedFile, true));\r\n            pw.write(username);\r\n            pw.println();\r\n            pw.flush();\r\n            pw.close();\r\n            return false;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return a list of blocked users for this user\r\n     * @return array of blocked usernames\r\n     * @throws IOException\r\n     */\r\n    public String[] blockedList() throws IOException{\r\n        ArrayList<String> victims = new ArrayList<>();\r\n        String blockedFilePath = \"data/\" + ((this.isSeller)? \"sellers/\": \"buyers/\") + this.username + \"/hasBlocked\";\r\n        File blockedFile = new File(blockedFilePath);\r\n        BufferedReader bfr = new BufferedReader(new FileReader(blockedFile));\r\n        String line;\r\n        while((line = bfr.readLine())!= null) {\r\n            victims.add(line);\r\n        }\r\n        String[] blockedList = new String[victims.size()];\r\n        for(int i = 0; i < victims.size();i++) {\r\n            blockedList[i] = victims.get(i);\r\n        }\r\n        return blockedList;\r\n    }\r\n    \r\n    /**\r\n     * unblocked a user from the blockedList() return array\r\n     * @param username: name of person to unblock\r\n     */\r\n    public void unblockUser(String username) {\r\n        try {\r\n            ArrayList<String> lines = new ArrayList<>();\r\n            String blockedFilePath = \"data/\" + ((this.isSeller) ? \"sellers/\" : \"buyers/\") + this.username + \"/hasBlocked\";\r\n            File blockedFile = new File(blockedFilePath);\r\n            BufferedReader bfr = new BufferedReader(new FileReader(blockedFile));\r\n            String line;\r\n            while ((line = bfr.readLine()) != null) {\r\n                if (!line.equals(username)) {\r\n                    lines.add(line);\r\n                }\r\n            }\r\n            bfr.close();\r\n            PrintWriter pw = new PrintWriter(new FileWriter(blockedFile, true));\r\n            for (String l : lines) {\r\n                pw.write(l);\r\n                pw.println();\r\n            }\r\n            pw.flush();\r\n            pw.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MarketUser.java b/MarketUser.java
--- a/MarketUser.java	(revision 2b35abdfdce701c2ebe9e2af250bd50ca9a17b38)
+++ b/MarketUser.java	(date 1667843720833)
@@ -1,7 +1,6 @@
 import java.io.*;
 import java.sql.SQLOutput;
 import java.util.*;
-import java.text.SimpleDateFormat;
 
 public class MarketUser implements User{
     private String username;
@@ -316,12 +315,11 @@
                 FileOutputStream fosReceive = new FileOutputStream(recipientF, true);
                 PrintWriter messageReceiveWriter = new PrintWriter(fosReceive);
                 Scanner scan = new Scanner(System.in);
-                System.out.print(username + "- ");
+                System.out.print(username + ": ");
                 message = scan.nextLine();
                 //write it on the end of each person's file
-                String timeStamp = new SimpleDateFormat("MM:dd:HH:mm:ss").format(new java.util.Date());
-                messageSenderWriter.println(username + " " + timeStamp + "- " + message);
-                messageReceiveWriter.println(username + " " + timeStamp + "- " + message);
+                messageSenderWriter.println(username + ": " + message);
+                messageReceiveWriter.println(username + ": " + message);
                 display.close();
                 messageSenderWriter.close();
                 messageReceiveWriter.close();
@@ -345,7 +343,7 @@
         String fileSender = "";
         String message;
         String printFile;
-        int count = 0;
+        int count = 1;
         int ind = -1;
         int flag;
 
@@ -365,77 +363,52 @@
                 BufferedReader display = new BufferedReader(new FileReader(senderF));
                 printFile = display.readLine();
                 while (printFile != null) {
-                    count++;
                     System.out.println(count + ": " + printFile);
+                    count++;
                     printFile = display.readLine();
                 }
-                if (count > 0) {
-                    BufferedReader buffSender = new BufferedReader(new FileReader(senderF));
-                    BufferedReader buffReceiver = new BufferedReader(new FileReader(recipientF));
-                    FileOutputStream fosSend = new FileOutputStream(senderF, false);
-                    PrintWriter messageSenderWriter = new PrintWriter(fosSend);
-                    FileOutputStream fosReceive = new FileOutputStream(recipientF, false);
-                    PrintWriter messageReceiveWriter = new PrintWriter(fosReceive);
-                    Scanner scan = new Scanner(System.in);
-                    //acquiring index
-                    System.out.println("Which index would you like to change?");
-                    do {
-                        flag = 0;
-                        try {
-                            ind = Integer.parseInt(scan.nextLine());
-                        } catch (NumberFormatException n) {
-                            flag++;
-                        }
-                        if (flag == 1 || (ind < 1 || ind > count))
-                            System.out.println("Your index must be a number and must be available. Try again:");
-                    } while (flag == 1 || (ind < 1 || ind > count));
-                    System.out.println("What would you like the new version to say?");
-                    String edit = scan.nextLine();
-                    ArrayList<String> readSenderFile = new ArrayList<>();
-                    ArrayList<String> readReceiverFile = new ArrayList<>();
-                    String messageToChange = "";
-                    String line1 = buffSender.readLine();
-                    while (line1 != null) {
-                        readSenderFile.add(line1);
-                        line1 = buffSender.readLine();
-                    }
-                    String line2 = buffReceiver.readLine();
-                    while (line2 != null) {
-                        readReceiverFile.add(line2);
-                        line2 = buffReceiver.readLine();
-                    }
-                    // runs through senders file to find index and change to edit
-                    String extractNameAndTime;
-                    for (int i = 0; i < readSenderFile.size(); i++) {
-                        if (i == ind - 1) {
-                            extractNameAndTime = readSenderFile.get(i).substring(0, readSenderFile.get(i).indexOf("-") + 1);
-                            // this stores the message prior to editing so it can be found in the receivers file
-                            messageToChange = readSenderFile.get(i);
-                            edit = extractNameAndTime + " " + edit;
-                            readSenderFile.set(i, edit);
-                        }
+                BufferedReader buffSender = new BufferedReader(new FileReader(senderF));
+                FileOutputStream fosSend = new FileOutputStream(senderF, false);
+                PrintWriter messageSenderWriter = new PrintWriter(fosSend);
+                FileOutputStream fosReceive = new FileOutputStream(recipientF, false);
+                PrintWriter messageReceiveWriter = new PrintWriter(fosReceive);
+                Scanner scan = new Scanner(System.in);
+                //acquiring index
+                System.out.println("Which index would you like to change?");
+                do {
+                    flag = 0;
+                    try {
+                        ind = Integer.parseInt(scan.nextLine());
+                    } catch (NumberFormatException n) {
+                        flag++;
+                    }
+                    if (flag == 1 || (ind < 1 || ind > count))
+                        System.out.println("Your index must be a number and must be available. Try again:");
+                } while (flag == 1 || (ind < 1 || ind > count));
+                System.out.println("What would you like the new version to say?");
+                String edit = scan.nextLine();
+                ArrayList<String> readSenderFile = new ArrayList<>();
+                ArrayList<String> readReceiverFile = new ArrayList<>();
+                String line = buffSender.readLine();
+                //run through array, add lines, and check throughout if line matches criteria and then change it
+                int count2 = 0;
+                while (line != null) {
+                    if (ind - 1 == count2) {
+                        line = edit;
                     }
-                    // runs through the receivers file and finds the message to change, and changes it
-                    for (int i = 0; i < readReceiverFile.size(); i++) {
-                        if (readReceiverFile.get(i) == messageToChange) {
-                            readReceiverFile.set(i, edit);
-                        }
-                    }
-
-                    //write back to files
-                    for (int i = 0; i < readSenderFile.size(); i++) {
-                        messageSenderWriter.write(readSenderFile.get(i));
-                    }
-                    for (int i = 0; i < readReceiverFile.size(); i++) {
-                        messageReceiveWriter.write(readReceiverFile.get(i));
-                    }
-                    display.close();
-                    buffSender.close();
-                    buffReceiver.close();
-                    messageSenderWriter.close();
-                    messageReceiveWriter.close();
-                } else
-                    System.out.println("There is nothing in this file to edit.");
+                    readSenderFile.add(username + ": " + line);
+                    line = buffSender.readLine();
+                    count2++;
+                }
+                //write back to files
+                for (int i = 0; i < readSenderFile.size(); i++) {
+                    messageSenderWriter.write(readSenderFile.get(i));
+                    messageReceiveWriter.write(readSenderFile.get(i));
+                }
+                display.close();
+                buffSender.close();
+                messageSenderWriter.close();
+                messageReceiveWriter.close();
             } catch (IOException e) {
                 e.printStackTrace();
             }
@@ -444,23 +417,23 @@
     }
 
     /**
-        * Searches file for index that matches one given by the user to not add it to an arraylist and
-        * therefore not write it to the file
-         *
-        * @param recipient
-         *
-        * @Author John Brooks
-         */
+     * Searches file for index that matches one given by the user to not add it to an arraylist and
+     * therefore not write it to the file
+     *
+     * @param recipient
+     *
+     * @Author John Brooks
+     */
 
     public void deleteMessage(String recipient) {
         String fileRecipient = "";
         String fileSender = "";
         String message;
         String printFile;
-        int count = 0;
+        int count = 1;
         int flag;
         int indexOfDelete = -1;
-        
+
         if (isSeller) {
             fileSender = "data/sellers/" + username + "/";
             fileRecipient = "data/buyers/" + recipient + "/";
@@ -477,53 +450,50 @@
                 BufferedReader display = new BufferedReader(new FileReader(senderF));
                 printFile = display.readLine();
                 while (printFile != null) {
+                    System.out.println(count + ": " + printFile);
                     count++;
-                    System.out.println(count + ": " + printFile);
                     printFile = display.readLine();
                 }
-                if (count > 0) {
-                    BufferedReader buffSender = new BufferedReader(new FileReader(senderF));
-                    FileOutputStream fosSend = new FileOutputStream(senderF, false);
-                    PrintWriter messageSenderWriter = new PrintWriter(fosSend);
-                    Scanner scan = new Scanner(System.in);
-                    //get index of delete
-                    do {
-                        flag = 0;
-                        try {
-                            indexOfDelete = Integer.parseInt(scan.nextLine());
-                        } catch (NumberFormatException n) {
-                            flag++;
-                        }
-                        if (flag == 1 || (indexOfDelete < 1 || indexOfDelete > count))
-                            System.out.println("Your index must be a number and must be available. Try again:");
-                    } while (flag == 1 || (indexOfDelete < 1 || indexOfDelete > count));
+                BufferedReader buffSender = new BufferedReader(new FileReader(senderF));
+                FileOutputStream fosSend = new FileOutputStream(senderF, false);
+                PrintWriter messageSenderWriter = new PrintWriter(fosSend);
+                Scanner scan = new Scanner(System.in);
+                //get index of delete
+                do {
+                    flag = 0;
+                    try {
+                        indexOfDelete = Integer.parseInt(scan.nextLine());
+                    } catch (NumberFormatException n) {
+                        flag++;
+                    }
+                    if (flag == 1 || (indexOfDelete < 1 || indexOfDelete > count))
+                        System.out.println("Your index must be a number and must be available. Try again:");
+                } while (flag == 1 || (indexOfDelete < 1 || indexOfDelete > count));
 
-                    ArrayList<String> readSenderFile = new ArrayList<>();
-                    String line = buffSender.readLine();
-                    //run through array, add lines, and check throughout if line matches indexOfDelete then dont add it
-                    int count2 = 0;
-                    while (line != null) {
-                        count2++;
-                        if (count2 != indexOfDelete) {
-                            readSenderFile.add(line);
-                        }
-                        line = buffSender.readLine();
-                    }
-                    for (int i = 0; i < readSenderFile.size(); i++) {
-                        messageSenderWriter.write(readSenderFile.get(i));
-                    }
-                    display.close();
-                    buffSender.close();
-                    messageSenderWriter.close();
-                } else
-                    System.out.println("There is nothing in this file to delete.");
+                ArrayList<String> readSenderFile = new ArrayList<>();
+                String line = buffSender.readLine();
+                //run through array, add lines, and check throughout if line matches criteria then dont add it
+                int count2 = 1;
+                while (line != null) {
+                    if (!(count2 == indexOfDelete)) {
+                        readSenderFile.add(line);
+                    }
+                    line = buffSender.readLine();
+                    count2++;
+                }
+                for (int i = 0; i < readSenderFile.size(); i++) {
+                    messageSenderWriter.write(readSenderFile.get(i));
+                }
+                display.close();
+                buffSender.close();
+                messageSenderWriter.close();
             } catch (IOException e) {
                 e.printStackTrace();
             }
         }
     }
 
-   /**
+    /**
      * Block a user if not already blocked
      * @param username: name of person to block
      * @return true if already blocked, false if notBlocked
@@ -554,7 +524,7 @@
             return false;
         }
     }
-    
+
     /**
      * Return a list of blocked users for this user
      * @return array of blocked usernames
@@ -575,7 +545,7 @@
         }
         return blockedList;
     }
-    
+
     /**
      * unblocked a user from the blockedList() return array
      * @param username: name of person to unblock
Index: out/production/Project-4-Repository/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_18\" default=\"true\" project-jdk-name=\"openjdk-18\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/Project-4-Repository/.idea/misc.xml b/out/production/Project-4-Repository/.idea/misc.xml
--- a/out/production/Project-4-Repository/.idea/misc.xml	(revision 2b35abdfdce701c2ebe9e2af250bd50ca9a17b38)
+++ b/out/production/Project-4-Repository/.idea/misc.xml	(date 1667841157026)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" default="true" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"openjdk-19\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 2b35abdfdce701c2ebe9e2af250bd50ca9a17b38)
+++ b/.idea/misc.xml	(date 1667841157026)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="openjdk-19" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
