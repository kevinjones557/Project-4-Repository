Index: LogIn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class LogIn {\r\n    /**\r\n     * Writes user's username to a file\r\n     *\r\n     * @param user String of the user's username\r\n     * @return boolean of if file was successfully written or not\r\n     */\r\n    public static boolean writeFile(String user) {\r\n        try (PrintWriter pw = new PrintWriter(new FileOutputStream(\"users/\" + user + \"/\" + user))) {\r\n            pw.println(user);\r\n            return (true);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends an additional line to a given user's file\r\n     *\r\n     * @param user     the user whose file is being appended\r\n     * @param toAppend the parameter that is being appended to the file\r\n     * @return boolean of if the file was successfully written or not\r\n     */\r\n    public static boolean writeFile(String user, String toAppend) {\r\n        try (PrintWriter pw = new PrintWriter(new FileOutputStream(\"users/\" + user + \"/\" + user, true))) {\r\n            pw.println(toAppend);\r\n            return (true);\r\n        } catch (Exception e) {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the given store name is already in use\r\n     *\r\n     * @param storeName the name of the store being checked\r\n     * @return boolean of if the store exists or not for handling in main\r\n     */\r\n    public static boolean checkStoreList (String storeName) {\r\n        try (BufferedReader br = new BufferedReader(new FileReader(\"users/storeNames\"))) {\r\n            ArrayList<String> fileContents = new ArrayList<>();\r\n            String line = br.readLine();\r\n            if (line == null) {\r\n                updateStoreList(storeName);\r\n                return (true);\r\n            }\r\n            while (line != null) {\r\n                fileContents.add(line);\r\n                line = br.readLine();\r\n            }\r\n            for (String fileContent : fileContents) {\r\n                if (fileContent.equals(storeName)) {\r\n                    return (false);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"An unknown error occurred!\");\r\n        }\r\n        updateStoreList(storeName);\r\n        return (true);\r\n    }\r\n\r\n    /**\r\n     * Updates the store list by adding a store name that has been confirmed to not be in use already\r\n     *\r\n     * @param storeName the store name being appended to the file\r\n     */\r\n    public static void updateStoreList (String storeName) {\r\n        try (PrintWriter pw = new PrintWriter(new FileOutputStream(\"users/storeNames\", true))) {\r\n            pw.println(storeName);\r\n        } catch (Exception e) {\r\n            System.out.println(\"An unknown error occurred!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encrypts the password of the user file when an account is created\r\n     *\r\n     * @param user the user whose password is being encrypted\r\n     */\r\n    public static void encryptFile(String user) {\r\n        try (BufferedReader br = new BufferedReader(new FileReader(\"users/\" + user + \"/\" + user))) {\r\n            String password = \"\";\r\n            int index = 0;\r\n            String line = br.readLine();\r\n            while (line != null) {\r\n                index++;\r\n                if (index == 2) {\r\n                    password = line;\r\n                }\r\n                line = br.readLine();\r\n            }\r\n            br.close();\r\n            char[] toBeEncrypted = password.toCharArray();\r\n            for (int i = 0; i < toBeEncrypted.length; i++) {\r\n                if (i % 2 == 0) {\r\n                    toBeEncrypted[i] += 5;\r\n                } else {\r\n                    toBeEncrypted[i] -= 5;\r\n                }\r\n            }\r\n            writeFile(user);\r\n            String finalPassword = \"\";\r\n            for (char c : toBeEncrypted) {\r\n                finalPassword += c;\r\n            }\r\n            writeFile(user, finalPassword);\r\n        } catch (Exception e) {\r\n            System.out.println(\"An unknown error occurred!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Takes a password input by a user attempting to log in and uses the key to encrypt it for comparison\r\n     *\r\n     * @param input the password being encrypted\r\n     * @return String of the encrypted password\r\n     */\r\n    public static String encrypt(String input) {\r\n        String finalInput = \"\";\r\n        char[] inputArray = input.toCharArray();\r\n        for (int i = 0; i < inputArray.length; i++) {\r\n            if (i % 2 == 0) {\r\n                inputArray[i] += 5;\r\n            } else {\r\n                inputArray[i] -= 5;\r\n            }\r\n        }\r\n        for (char c : inputArray) {\r\n            finalInput += c;\r\n        }\r\n        return (finalInput);\r\n    }\r\n\r\n    /**\r\n     * Creates the file and directory for a user only if the account doesn't already exist\r\n     *\r\n     * @param user the user whose file is being created\r\n     * @param scan scanner object to capture input\r\n     */\r\n    public static void createUser(String user, Scanner scan) {\r\n        File f;\r\n        File dir = new File(\"users/\" + user);\r\n        if (!dir.exists()) {\r\n            dir.mkdirs();\r\n            f = new File(\"users/\" + user + \"/\" + user);\r\n        } else {\r\n            try {\r\n                if (!dir.createNewFile()) {\r\n                    while (!dir.createNewFile()) {\r\n                        System.out.println(\"User already exists! Please enter another username.\");\r\n                        user = scan.nextLine();\r\n                        dir = new File(\"users/\" + user);\r\n                    }\r\n                }\r\n                dir.mkdirs();\r\n                f = new File(\"users/\" + user + \"/\" + user);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                System.out.println(\"An unknown error occurred!\");\r\n            }\r\n        }\r\n        boolean fileStatus = writeFile(user);\r\n        boolean done = false;\r\n        if (fileStatus) {\r\n            try {\r\n                while (!done) {\r\n                    System.out.println(\"Please enter a password between 8 and 16 characters.\");\r\n                    String password = scan.nextLine();\r\n                    if (password.length() < 8 || password.length() > 16) {\r\n                        while (password.length() < 8 || password.length() > 16) {\r\n                            System.out.println(\"Password length must be between 8 and 16 characters! Please enter a valid password.\");\r\n                            password = scan.nextLine();\r\n                        }\r\n                    }\r\n                    fileStatus = writeFile(user, password);\r\n                    if (!fileStatus) {\r\n                        System.out.println(\"An unknown error occurred! Please try again.\");\r\n                    }\r\n                    encryptFile(user);\r\n                    done = true;\r\n                }\r\n                done = false;\r\n                System.out.println(\"Are you a seller? Please enter 'yes' or 'no.'\");\r\n                String isSeller = scan.nextLine();\r\n                while (!done) {\r\n                    while (!isSeller.equalsIgnoreCase(\"yes\") &&\r\n                            !isSeller.equalsIgnoreCase(\"no\")) {\r\n                        System.out.println(\"Please enter 'yes' or 'no'!\");\r\n                        isSeller = scan.nextLine();\r\n                    }\r\n                    //TODO make user confirm store name\r\n                    if (isSeller.equalsIgnoreCase(\"yes\")) {\r\n                        isSeller = \"true\";\r\n                        FileManager.generateDirectoryFromUsername(user, true);\r\n                        boolean doneStores = false;\r\n                        ArrayList<String> storeNames = new ArrayList<>();\r\n                        while (!doneStores) {\r\n                            System.out.println(\"Please enter your store name.\");\r\n                            String storeName = scan.nextLine();\r\n                            boolean nameChecked = checkStoreList(storeName);\r\n                            //skips line underneath\r\n                            if (storeName.equals(\"\") || !nameChecked) {\r\n                                while (storeName.equals(\"\") || !nameChecked) {\r\n                                    System.out.println(\"Store name is either blank or in use! Please enter a valid store name.\");\r\n                                    storeName = scan.nextLine();\r\n                                    nameChecked = checkStoreList(storeName);\r\n                                }\r\n                            }\r\n                            storeNames.add(storeName);\r\n                            int input = -1;\r\n                            System.out.println(\"Enter '1' to add an additional store or '2' to finish adding stores.\");\r\n                            boolean inputTaken = false;\r\n                            while (!inputTaken) {\r\n                                try {\r\n                                    input = scan.nextInt();\r\n                                    scan.nextLine();\r\n                                    if (input == 1 || input == 2) {\r\n                                        inputTaken = true;\r\n                                    } else {\r\n                                        System.out.println(\"Please enter '1' or '2' as input!\");\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    System.out.println(\"Please enter '1' or '2' as input!\");\r\n                                }\r\n                            }\r\n                            if (input == 2) {\r\n                                doneStores = true;\r\n                            }\r\n                        }\r\n                        fileStatus = writeFile(user, isSeller);\r\n                        fileStatus = writeFile(user, storeNames.toString());\r\n                    } else {\r\n                        FileManager.generateDirectoryFromUsername(user, false);\r\n                        isSeller = \"false\";\r\n                        fileStatus = writeFile(user, isSeller);\r\n                    }\r\n                    if (!fileStatus) {\r\n                        break;\r\n                    }\r\n                    done = true;\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"Please enter a valid String input!\");\r\n            }\r\n        }\r\n        if (!fileStatus) {\r\n            System.out.println(\"An unknown error occurred!\");\r\n        }\r\n        System.out.printf(\"Account created! Welcome, %s!%n\", user);\r\n    }\r\n\r\n    /**\r\n     * Reads the password of the file for comparison\r\n     *\r\n     * @param user the user whose password is being read\r\n     * @return String of the encrypted password\r\n     */\r\n    public static String readPassword(String user) {\r\n        try (BufferedReader br = new BufferedReader(new FileReader(\"users/\" + user + \"/\" + user))) {\r\n            String password = \"\";\r\n            int index = 0;\r\n            String line = br.readLine();\r\n            while (line != null) {\r\n                index++;\r\n                if (index == 2) {\r\n                    password = line;\r\n                }\r\n                line = br.readLine();\r\n            }\r\n            return (password);\r\n        } catch (Exception e) {\r\n            System.out.println(\"An unknown error occurred!\");\r\n        }\r\n        return (null);\r\n    }\r\n\r\n    /**\r\n     * Allows users to log in OR calls methods above and builds a file of the following format for a new user:\r\n     * username\r\n     * password (encrypted)\r\n     * isSeller (true or false)\r\n     * storeName (included ONLY is user isSeller)\r\n     *\r\n     * @return String of the user's name\r\n     */\r\n    public static String userInteraction() {\r\n        Scanner scan = new Scanner(System.in);\r\n        System.out.println(\"Welcome! Please enter 1 to log in or 2 to create a new account.\");\r\n        boolean done = false;\r\n        int input = 0;\r\n        while (!done) {\r\n            try {\r\n                input = scan.nextInt();\r\n                scan.nextLine();\r\n                if (input == 1 || input == 2) {\r\n                    done = true;\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"That's not a valid input!\");\r\n            }\r\n        }\r\n        if (input == 1) {\r\n            boolean userFound = false;\r\n            String user = \"\";\r\n            done = false;\r\n            while (!done) {\r\n                System.out.println(\"Please enter your username.\");\r\n                user = scan.nextLine();\r\n                File F = new File(\"users/\" + user + \"/\" + user);\r\n                try {\r\n                    if (F.createNewFile()) {\r\n                        F.delete();\r\n                        System.out.println(\"That user doesn't exist! Press 1 to try again and 2 to exit.\");\r\n                        boolean continueUser = false;\r\n                        while (!continueUser) {\r\n                            try {\r\n                                input = scan.nextInt();\r\n                                scan.nextLine();\r\n                                if (input == 2) {\r\n                                    done = true;\r\n                                    break;\r\n                                } else if (input == 1) {\r\n                                    continueUser = true;\r\n                                } else {\r\n                                    System.out.println(\"Please enter a valid input!\");\r\n                                }\r\n                            } catch (Exception e) {\r\n                                System.out.println(\"Please enter a valid input!\");\r\n                            }\r\n                        }\r\n                    } else {\r\n                        userFound = true;\r\n                        done = true;\r\n                    }\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            if (userFound) {\r\n                boolean loggedIn = false;\r\n                System.out.println(\"Please enter your password\");\r\n                done = false;\r\n                while (!done) {\r\n                    try {\r\n                        String passwordInput = scan.nextLine();\r\n                        if (encrypt(passwordInput).equals(readPassword(user))) {\r\n                            System.out.printf(\"Welcome, %s!%n\", user);\r\n                            done = true;\r\n                            loggedIn = true;\r\n                        } else {\r\n                            boolean continuePassword = false;\r\n                            while (!continuePassword) {\r\n                                System.out.println(\"Incorrect password! Enter 1 to try again or 2 to exit.\");\r\n                                try {\r\n                                    input = scan.nextInt();\r\n                                    scan.nextLine();\r\n                                    if (input == 2) {\r\n                                        done = true;\r\n                                        break;\r\n                                    } else if (input == 1) {\r\n                                        continuePassword = true;\r\n                                        System.out.println(\"Please enter your password\");\r\n                                    } else {\r\n                                        System.out.println(\"Please enter a valid input!\");\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    System.out.println(\"Please enter a valid input!\");\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        System.out.println(\"An unknown error occurred!\");\r\n                    }\r\n                }\r\n                if (loggedIn) {\r\n                    return (user);\r\n                }\r\n            }\r\n        } else {\r\n            done = false;\r\n            System.out.println(\"Please enter a username.\");\r\n            while (!done) {\r\n                try {\r\n                    String user = scan.nextLine();\r\n                    if (user.contains(\" \")) {\r\n                        while (user.contains(\" \")) {\r\n                            System.out.println(\"Spaces are not permitted in usernames! Please enter a username without spaces.\");\r\n                            user = scan.nextLine();\r\n                        }\r\n                    }\r\n                    createUser(user, scan);\r\n                    done = true;\r\n                    return (user);\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Please enter a valid username!\");\r\n                }\r\n            }\r\n        }\r\n        return (null);\r\n    }\r\n\r\n    /**\r\n     * Runs all LogIn methods to either create a user or log one in; afterwards, creates String ArrayList of user information\r\n     *\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        String user = userInteraction();\r\n        if (user != null) {\r\n            ArrayList<String> fileContents = new ArrayList();\r\n            try (BufferedReader bfr = new BufferedReader(new FileReader(\"users/\" + user + \"/\" + user))) {\r\n                int index = 0;\r\n                String line = bfr.readLine();\r\n                while (line != null) {\r\n                    index++;\r\n                    if (index != 2) {\r\n                        fileContents.add(line);\r\n                    }\r\n                    line = bfr.readLine();\r\n\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"An unknown error occurred!\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Goodbye!\");\r\n        }\r\n    }\r\n}\r\n//TODO prompt for email as well (check for @)\r\n//TODO add edit and delete functionality\r\n//TODO if user edits username, call MarketUser.changeUsername(oldUsername, newUsername) and then change username in yours as well\r\n//TODO limit password length
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LogIn.java b/LogIn.java
--- a/LogIn.java	(revision f4e77d40431ffb3fdd22581bcb82ce83361f72a4)
+++ b/LogIn.java	(date 1667913846641)
@@ -245,6 +245,19 @@
                     }
                     done = true;
                 }
+                done = false;
+                String email = null;
+                System.out.println("Please enter an email to be associated with your account.");
+                while (!done) {
+                    email = scan.nextLine();
+                    if (email.equals("") || !email.contains("@")) {
+                        System.out.println("That's not a valid email! Please enter an email with a valid name and domain.");
+                        email = scan.nextLine();
+                    } else {
+                        done = true;
+                    }
+                }
+                writeFile(user, email);
             } catch (Exception e) {
                 System.out.println("Please enter a valid String input!");
             }
@@ -286,6 +299,7 @@
      * password (encrypted)
      * isSeller (true or false)
      * storeName (included ONLY is user isSeller)
+     * email address
      *
      * @return String of the user's name
      */
@@ -434,5 +448,4 @@
 }
 //TODO prompt for email as well (check for @)
 //TODO add edit and delete functionality
-//TODO if user edits username, call MarketUser.changeUsername(oldUsername, newUsername) and then change username in yours as well
-//TODO limit password length
\ No newline at end of file
+//TODO if user edits username, call MarketUser.changeUsername(oldUsername, newUsername) and then change username in yours as well
\ No newline at end of file
Index: out/production/Project-4-Repository/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"openjdk-19\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/Project-4-Repository/.idea/misc.xml b/out/production/Project-4-Repository/.idea/misc.xml
--- a/out/production/Project-4-Repository/.idea/misc.xml	(revision f4e77d40431ffb3fdd22581bcb82ce83361f72a4)
+++ b/out/production/Project-4-Repository/.idea/misc.xml	(date 1667860829888)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="openjdk-19" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" project-jdk-name="openjdk-19" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"openjdk-19\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision f4e77d40431ffb3fdd22581bcb82ce83361f72a4)
+++ b/.idea/misc.xml	(date 1667860829888)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="openjdk-19" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" project-jdk-name="openjdk-19" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: out/production/Project-4-Repository/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-4-Repository\r\nThis repository contains the code for Project 4\r\n\r\n\r\nBuyers -> Kevin -> KevinVinh.txt, hasBlocked.txt\r\n\r\n\r\nSellers-> Vinh -> VinhKevin.txt, hasBlocked.txt, statistics.txt        \r\n        \r\n        \r\n*note: \r\n- Sellers credential file: Username \\n StoreName \\n Password\r\n- Buyers credential file: Username \\n Password\r\n- statistics.txt contains a list of usernames and their number of messages sent to the store followed by words and their frequencies.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/Project-4-Repository/README.md b/out/production/Project-4-Repository/README.md
--- a/out/production/Project-4-Repository/README.md	(revision f4e77d40431ffb3fdd22581bcb82ce83361f72a4)
+++ b/out/production/Project-4-Repository/README.md	(date 1667860290875)
@@ -12,3 +12,27 @@
 - Sellers credential file: Username \n StoreName \n Password
 - Buyers credential file: Username \n Password
 - statistics.txt contains a list of usernames and their number of messages sent to the store followed by words and their frequencies.
+
+Sellers can create multiple stores.
+
+LogIn: Must prompt for username, email, and password. If it is a seller, give them the option to add stores (as many as they want) any additional log in they can add stores
+They must be able to change this info at any time
+
+Seller can add stores at any time, can't get rid of stores
+
+create a file under data/(buyers or sellers)/(username)/credentials to store email, username, and password
+
+for sellers create a master file that has
+Store1 : Seller1
+Store2 : Seller1
+Store3 : Seller2
+Store4 : Seller3
+Store5 : Seller3
+
+all messaging will still be done through <buyername><sellername>.txt no direct communication through stores, just through seller
+
+HUGE PROBLEM IF WE LET THEM EDIT USERNAME
+
+In Menu:
+Customers see a list of stores, then go throuhg file and find seller
+Customeres also search for seller username directly
diff --git a/data/sellers/testUser2/metrics.txt b/data/sellers/testUser2/metrics.txt
new file mode 100644
